<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2023 OPS4J.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.ops4j.pax</groupId>
        <artifactId>url</artifactId>
        <version>3.0.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <groupId>org.ops4j.pax.url</groupId>
    <artifactId>pax-url-aether</artifactId>
    <packaging>bundle</packaging>

    <name>OPS4J Pax Url - mvn:</name>
    <description>OPS4J Pax Url - mvn: protocol handler</description>

    <properties>
        <bundle.symbolicName>org.ops4j.pax.url.mvn</bundle.symbolicName>
        <bundle.namespace>org.ops4j.pax.url.mvn</bundle.namespace>
        <TEST_REPO>file:${project.build.directory}/remote-repo</TEST_REPO>
    </properties>

    <dependencies>

        <!-- OPS4J -->

        <dependency>
            <groupId>org.ops4j.base</groupId>
            <artifactId>ops4j-base-lang</artifactId>
        </dependency>
        <dependency>
            <groupId>org.ops4j.base</groupId>
            <artifactId>ops4j-base-util-property</artifactId>
        </dependency>

        <!-- OSGi -->

        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>osgi.core</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.service.cm</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Logging -->

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Maven -->

        <!-- We get ALL our Maven / Maven Resolver dependencies through MiMa -->

        <dependency>
            <groupId>eu.maveniverse.maven.mima</groupId>
            <artifactId>context</artifactId>
            <version>${dependency.eu.maveniverse.maven.mima}</version>
        </dependency>
        <dependency>
            <groupId>eu.maveniverse.maven.mima.runtime</groupId>
            <artifactId>standalone-static</artifactId>
            <version>${dependency.eu.maveniverse.maven.mima}</version>
        </dependency>

        <!-- Test -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-module-junit4</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.powermock</groupId>
            <artifactId>powermock-api-easymock</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Jetty -->

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-security</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Invoke maven goals -->

        <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-invoker</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
            <version>${dependency.org.apache.maven}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>${dependency.org.apache.maven}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugin-tools</groupId>
            <artifactId>maven-plugin-annotations</artifactId>
            <version>3.9.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-invoker-plugin</artifactId>
            <version>${plugin.maven-invoker-plugin}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*.jks</exclude>
                    <exclude>repo2/**</exclude>
                    <exclude>repo3/**</exclude>
                    <exclude>repomulti/**</exclude>
                    <exclude>repomulti_ordered/**</exclude>
                    <exclude>repomulti_snapshots/**</exclude>
                    <exclude>repomulti_with_file/**</exclude>
                    <exclude>repomulti_with_file/**</exclude>
                </excludes>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>repo2/**</include>
                    <include>repo3/**</include>
                    <include>repomulti/**</include>
                    <include>repomulti_ordered/**</include>
                    <include>repomulti_snapshots/**</include>
                    <include>repomulti_with_file/**</include>
                </includes>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <dependencyReducedPomLocation>${project.build.directory}/dependency-reduced-pom.xml</dependencyReducedPomLocation>
                            <shadedClassifierName />
                            <artifactSet>
                                <includes>
                                    <!--
                                        Normaly we'd include nothing here, because classes from required artifacts are already
                                        included using Embed-Dependency for maven-bundle-plugin and all we'd have to do
                                        now is to shade what we need.
                                        The problem is that we also need dependency-reduced-pom.xml without
                                        shaded and embedded artifacts...
                                        That's why we repeat the information contained (in different form) in osgi.bnd
                                    -->
                                    <include>eu.maveniverse.maven.mima:context</include>
                                    <include>eu.maveniverse.maven.mima.runtime:standalone-shared</include>
                                    <include>eu.maveniverse.maven.mima.runtime:standalone-static</include>
                                    <include>org.ops4j.base:*</include>
                                    <include>commons-codec:commons-codec</include>
                                    <include>org.apache.commons:commons-lang3</include>
                                    <include>org.apache.httpcomponents:*</include>
                                    <include>org.apache.maven:*</include>
                                    <include>org.apache.maven.resolver:*</include>
                                    <include>org.codehaus.plexus:*</include>
                                </includes>
                            </artifactSet>
                            <relocations>
                                <relocation>
                                    <shadedPattern>shaded.</shadedPattern>
                                    <includes>
                                        <include>eu.maveniverse.maven.mima.**</include>
                                        <include>org.ops4j.lang.**</include>
                                        <include>org.ops4j.util.property.**</include>
                                        <include>org.apache.commons.codec.**</include>
                                        <include>org.apache.commons.lang3.**</include>
                                        <include>org.apache.http.**</include>
                                        <include>org.apache.maven.**</include>
                                        <include>org.eclipse.aether.**</include>
                                        <include>org.codehaus.plexus.**</include>
                                        <include>org.sonatype.plexus.components.**</include>
                                        <include>licenses.**</include>
                                    </includes>
                                </relocation>
                                <relocation>
                                    <pattern>META-INF.versions.9.org.codehaus.plexus</pattern>
                                    <shadedPattern>META-INF.versions.9.shaded.org.codehaus.plexus</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>META-INF.versions.10.org.codehaus.plexus</pattern>
                                    <shadedPattern>META-INF.versions.10.shaded.org.codehaus.plexus</shadedPattern>
                                </relocation>
                                <relocation>
                                    <pattern>META-INF.versions.11.org.codehaus.plexus</pattern>
                                    <shadedPattern>META-INF.versions.11.shaded.org.codehaus.plexus</shadedPattern>
                                </relocation>
                            </relocations>
                            <transformers>
                                <!--
                                    ManifestResourceTransformer ensures we get our META-INF/MANIFEST.MF  when excluding
                                    this resource from artifacts, but somehow it works painfully slow (didn't finish after 1 hour)...
                                -->
<!--                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer" />-->
                            </transformers>
                            <filters>
                                <filter>
                                    <!--
                                        we can't declare one filter that matches "all but us" and we'd have to
                                        declare excludes for each individual dependency...
                                        that's why I decided to end with a warning like this:
                                        [INFO] Dependency-reduced POM written at: /data/sources/github.com/ops4j/org.ops4j.pax.url-3.0.x/pax-url-aether/target/dependency-reduced-pom.xml
                                        [WARNING] context-2.4.2.jar, ops4j-base-lang-1.5.1.jar, ops4j-base-util-property-1.5.1.jar, pax-url-aether-3.0.1-SNAPSHOT.jar, standalone-shared-2.4.2.jar, standalone-static-2.4.2.jar define 1 overlapping resource:
                                        [WARNING]   - META-INF/MANIFEST.MF
                                        [WARNING] ops4j-base-lang-1.5.1.jar, ops4j-base-util-property-1.5.1.jar define 3 overlapping resources:
                                        [WARNING]   - META-INF/DEPENDENCIES.txt
                                        [WARNING]   - META-INF/LICENSE.txt
                                        [WARNING]   - META-INF/NOTICE.txt
                                        ...
                                    -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>META-INF/DEPENDENCIES</exclude>
                                        <exclude>META-INF/DEPENDENCIES.txt</exclude>
<!--                                        <exclude>META-INF/LICENSE</exclude>-->
                                        <exclude>META-INF/LICENSE.txt</exclude>
<!--                                        <exclude>META-INF/MANIFEST.MF</exclude>-->
                                        <exclude>META-INF/NOTICE</exclude>
                                        <exclude>META-INF/NOTICE.txt</exclude>
                                        <exclude>META-INF/.SF</exclude>
                                        <exclude>META-INF/.DSA</exclude>
                                        <exclude>META-INF/.RSA</exclude>
                                        <exclude>META-INF/sisu/**</exclude>
                                        <exclude>META-INF/services/eu.maveniverse.maven.mima.context.Runtime</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <environmentVariables>
                        <NEXUS_ROOT>https://oss.sonatype.org</NEXUS_ROOT>
                    </environmentVariables>
                    <systemPropertyVariables>
                        <jetty.http.port>${jetty.http.port}</jetty.http.port>
                    </systemPropertyVariables>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>reserve-port</id>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <phase>validate</phase>
                        <configuration>
                            <portNames>
                                <portName>jetty.http.port</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
